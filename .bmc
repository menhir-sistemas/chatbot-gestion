{"token":"eyJhbGciOiJIUzUxMiJ9.eyJidXNpbmVzc0lkIjoiZ2VzdGlvbiIsIm5hbWUiOiJMZW9uYXJkbyBCbHVtZW5jd2VpZyIsImFwaSI6dHJ1ZSwiaWQiOiJxUUVCWnNra1RyVmQ3ZkR3QzN0SVFEN0hUb2cxIiwiZXhwIjoxODg2Njc5MzE4LCJqdGkiOiJxUUVCWnNra1RyVmQ3ZkR3QzN0SVFEN0hUb2cxIn0.6LHZiEv9-9FPWGuTh-Wk27Uodfdw_CFC9Hlfxq2C4TzF7BjTYjuzPtRXnbkNIkuc4narT8_tZ-Ne1RYQ-RYnug","cas":[{"id":"JKCPLFCYKUEJ3IBFPPM2","name":"getOTbyContacto","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n//@constant('Variable where the response will be stored')\nconst BM_RESULT_VAR_NAME = 'OT'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\nconst CUSTOMER_ID = context.userData._id_;\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/warranty/cardif/getOrdenesDeTrabajo?tipo_documento=0&nro_documento=${context.userData.variables.documento}`,\n        json: true,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async() => {\n    const response = await callServiceApiRest();\n    user.set('q_ot', response[\"otCliente\"].length);\n    \n    if (response[\"otCliente\"].length > 0){\n      result.text('Este es el listado de las órdenes de trabajo asociadas con tu documento:')\n      let buttons = result.buttonsBuilder().text('Ingresá el número de la OT por la cual querés consultar el estado:');\n      let ots = [];\n      for(let i = 0;i < response[\"otCliente\"].length; i++){\n        buttons.addClientActionButton(response[\"otCliente\"][i], 'mostrarEstadoOT', {\n                'valueSelected': i,\n            });\n      }\n      buttons.addClientActionButton('Ninguno de los anteriores', 'mostrarEstadoOT', {\n                'valueSelected': 'ninguno',\n            });\n      buttons.quickReplies();\n      buttons.send();\n      user.set('ots', JSON.stringify(response.data));\n    }else{\n      user.set('CA_name','getOTbyContacto')\n      user.set('descripcion',`error: ${response.errores? response.errores.MensajeError.mensajeError : JSON.stringify(response)}\\n`)\n      result.gotoRule('Hablar con Agente')\n    }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(response);\n  \t\tuser.set('CA_name','getOTbyContacto')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"getotbycontacto.js"},{"id":"GSU4PCN2QIQODV4DMHNC","name":"getDatosUsuario(Seguros)","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/crm/cardif/getContacto?nro_documento=${context.userData.variables.documento}`,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async() => {\n    let response = await callServiceApiRest();\n    response = JSON.parse(response);\n  if (response[\"value\"] && response[\"value\"].length > 0){\n      user.set('id_contacto',response[\"value\"][0]['contactid']);\n  }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :   ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.userData.variables.documento);\n        user.set('CA_name','getDatosUsuario(Seguros)')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"getdatosusuario_seguros_.js"},{"id":"YI4NU0HOVUJ3UT4BCQAW","name":"getLocalidadesByCP","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\n//@constant('Variable where the response will be stored')\nconst BM_RESULT_VAR_NAME = 'Localidades'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\nconst CUSTOMER_ID = context.userData._id_;\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/warranty/cardif/getLocalidadesByCP?cp=${context.userData.variables.cp}`,\n        json: true,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async() => {\n    const response = await callServiceApiRest();\n    if (response.data){\n      if (!Array.isArray(response.data)){\n      result.text(`La localidad que coincide con el CP ingresado es *${response.data.Localidad.nombreLocalidad.toLowerCase()}*`);\n      user.set('codigoLocalidad', response.data.Localidad.codigoLocalidad);\n      user.set('codigoProvincia', response.data.Provincia.codigoProvincia);\n      }\n      else{\n        result.text(`Se encontró más de una localidad asociada con el CP ingresado`);\n        let buttons = result.buttonsBuilder().text('Ingresá la opción correspondiente:');\n        for(let i = 0;i < response.data.length; i++){\n          let localidad = response.data[i];\n        buttons.addClientActionButton(i+\". \"+localidad.Localidad.nombreLocalidad+\" (\"+localidad.Provincia.nombreProvincia+\")\", 'elegirLocalidad', {\n        \t'valueSelected': i,\n        });\n      \t}\n        buttons.addClientActionButton((response.data.length)+\".\"+' Ninguna de las anteriores', 'elegirLocalidad', {\n            'valueSelected': 'ninguno',\n      });\n      buttons.quickReplies();\n      buttons.send();\n      user.set(BM_RESULT_VAR_NAME, JSON.stringify(response.data))\n      }\n    }\n    else{\n      result.text(\"No se encontraron localidades con el código postal ingresado. Intentelo nuevamente.\");\n      result.gotoRule(\"vigente\");\n    }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.userData.variables.cp);\n        bmconsole.log(response);\n        user.set('CA_name','getLocalidadesByCP')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);\n\n/*if (response && response.garantiasCliente.length > 0){\n        user.set('q_garantias', response.garantiasCliente.length)\n      \tresult.text(`Este es el listado de garantías extendidas que coinciden con tus datos:`);\n      let buttons = result.buttonsBuilder().text('Ingresá el número de la garantía extendida por la cual querés realizar el trámite:');\n      let garantias = [];\n      for(let i = 0;i < response.garantiasCliente.length; i++){\n        buttons.addClientActionButton(i+\". \"+response.garantiasCliente[i], 'mostrarEstadoGarantia', {\n        \t'valueSelected': i,\n        });\n      }\n      buttons.addClientActionButton((response.garantiasCliente.length)+\".\"+' Ninguna de las anteriores', 'mostrarEstadoGarantia', {\n            'valueSelected': 'ninguno',\n      });\n      buttons.quickReplies();\n      buttons.send();\n      user.set('garantias', JSON.stringify(response.data))\n    }*/","unPublishedCode":null,"filename":"getlocalidadesbycp.js"},{"id":"Z70UWA1FLGBIDH2I3P2A","name":"enHorarioAtencion(check)","type":"USER","publishedCode":"const getFeriados = async (year) => {\n\n  return await rp({\n\n    method: 'GET',\n    uri: `https://api.argentinadatos.com/v1/feriados/${year}`,\n\n    json: true,\n\n    headers: {\n\n      'Content-Type': 'application/json',\n\n      'Accept': 'application/json',\n\n    },\n\n  });\n\n}\n\n\n\nasync function checkDate(fecha) {\n\n\n\n  // Verificar si es fin de semana (Sábado o Domingo) o si está fuera del horario de 9 a 21 hs\n\n  var diaSemana = fecha.getDay(); // 0 = Domingo, 1 = Lunes, ..., 6 = Sábado\n\n  var horaLocal = new Date();\n\n  var horaArgentina = new Date(horaLocal.getTime() - (3 * 60 * 60 * 1000));\n\n  var horaActual = horaArgentina.getHours();\n\n\n\n  if ((diaSemana === 0 || diaSemana === 6) || horaActual < 8 || horaActual >= 19) {\n\n    // Mensaje si está fuera del horario de atención\n\n    //result.text(\"Te informamos que nuestro horario de atención es días hábiles de Lunes a Viernes de 9 a 21 hs. Te pedimos que vuelvas a escribirnos dentro de ese horario así podemos ayudarte.\");\n\n    user.set('mensajeAtencion', \"Te informamos que nuestro horario de atención de lunes a viernes de 8 a 19 hs. Te pedimos que vuelvas a escribirnos dentro de ese horario así podemos ayudarte.\");\n\n    return false;\n\n  }\n\n\n\n  // Obtener información sobre feriados en Argentina para el año actual\n\n  try {\n\n    let feriados = await getFeriados(fecha.getFullYear());\n\n    // Verificar si la fecha actual es un feriado\n\n    var esFeriado = feriados.some(feriado => {\n      var fechaFeriado = new Date(feriado.fecha + \" 03:00:00\");\n\n      return fechaFeriado.toDateString() === fechaActual.toDateString();\n\n    });\n\n\n\n    if (esFeriado) {\n      // Mensaje si es feriado\n      /*result.text(`¡Hoy es feriado en Argentina, esperamos que estés descansando!.\n      Te pedimos que vuelvas a escribirnos el próximo día hábil de lunes a viernes de 9 a 21 así podemos ayudarte. Gracias`);*/\n      user.set('mensajeAtencion', `¡Hoy es feriado en Argentina, esperamos que estés descansando!.\n      Te pedimos que vuelvas a escribirnos el próximo día hábil de lunes a viernes de 8 a 19 hs. así podemos ayudarte. Gracias`);\n      return false;\n\n    }\n    // Mensaje si está dentro del horario de atención y no es feriado\n    return true;\n  } catch (error) {\n    bmconsole.log(\"Error al obtener información sobre feriados:\", error);\n    return true; // Se asume que no es feriado si hay un error en la obtención de datos\n  }\n\n}\n\n\n\n\n\n\n\nconst main = async () => {\n  fechaActual = new Date();\n  bmconsole.log(fechaActual);\n  bmconsole.log(context.userData.PLATFORM_CONTACT_ID);\n  const enAtencion = await checkDate(fechaActual);\n  user.set('enAtencion', enAtencion);\n  user.set('tiempo_atencion', context.message.SESSION_CREATION_TIME)\n};\n\n\n\nmain()\n  .catch(err => {\n    const errorMessage = `[CA_NAME] Error ${err.message}`;\n    user.set('ca_error', errorMessage); // Set error variable with error message to see on Events\n    bmconsole.log(errorMessage); // Log Error\n  })\n  .finally(result.done);\n","unPublishedCode":null,"filename":"enhorarioatencion_check_.js"},{"id":"LMXBV6HEFGK2EMSIFS2L","name":"mostrarEstadoGarantia","type":"USER","publishedCode":"const main = async () => {\n    //result.text('Usted eligio: '+ context.params.valueSelected);\n    let garantias = JSON.parse(context.userData.variables.garantias);\n    if (context.params.valueSelected === 'ninguno'){\n          user.set('choice', null)\n          result.gotoRule('Menu');\n    }\n    else{\n      let garantia = garantias[parseInt(context.params.valueSelected)];\n      if (garantia.accionarGarantia === 'true'){\n      \t//result.text(\"Garantia validada. Continuando con la operación.\");\n        user.set('poliza', garantia.poliza)\n        user.set('sublineaProducto', garantia.sublineaProducto)\n        user.set('codigoExtragarantia', garantia.codigoExtragarantia)\n        result.gotoRule('vigente');\n      }\n      else{\n        if (garantia.descripcionEstadoOt === 'Trámite finalizado'){\n        \tresult.gotoRule('finalizado');\n        }\n        else{\n       \t\tresult.gotoRule('fábrica');\n        }\n      }\n      \n    }\n};\n    \nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(garantias);\n  \t\tbmconsole.log(context.params.valueSelected);\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);\n","unPublishedCode":null,"filename":"mostrarestadogarantia.js"},{"id":"NKS2J5QEZRWXVPS8NUCT","name":"getServicioTecnico","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\n//@constant('Variable where the response will be stored')\nconst BM_RESULT_VAR_NAME = 'OT'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\nconst CUSTOMER_ID = context.userData._id_;\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/warranty/cardif/getServicioTecnico?cp=${context.userData.variables.cp}&codigo_localidad=${context.userData.variables.codigoLocalidad}&sublinea_producto=${context.userData.variables.sublineaProducto}`,\n        json: true,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async() => {\n    const response = await callServiceApiRest();\n    if (response.data && Array.isArray(response.data.ServicioTecnico)) {\n      \tlet buttons = result.buttonsBuilder().text('Selecciona un servicio técnico:');\n\n      for(let i = 0;i < response.data.ServicioTecnico.length; i++){\n        \tbuttons.addClientActionButton((i+1)+\". \"+response.data.ServicioTecnico[i].nombreDeServicioTecnico, 'mostrarDatosSsTecnico', {\n                'valueSelected': i,\n            });\n      \t}\n      buttons.quickReplies();\n      buttons.send();\n      user.set('servicios', JSON.stringify(response.data.ServicioTecnico));\n    }\n    else {\n      if (response.data && typeof response.data === 'object'){\n            let ss_tecnico = `Los datos asociados al servicio técnico son los siguientes:\n            Nombre: ${response.data.ServicioTecnico.nombreDeServicioTecnico}\n            Dirección:${response.data.ServicioTecnico.direccion}\n            Horario de atención:${response.data.ServicioTecnico.horarioDeAtencion}\n            Email: ${response.data.ServicioTecnico.email}\n            Teléfono: ${response.data.ServicioTecnico.telefono}\n            Te recordamos que tenés 5 días hábiles para comunicarte y llevar tu producto al Servicio Técnico, de lo contrario esta Orden de Trabajo (OT) se dará de baja y tendrás que generar una nueva.`\n        \tuser.set('codigo_sstecnico', response.data.ServicioTecnico.codigoServicio);\n            user.set('datos_sstecnico', ss_tecnico);\n        \tresult.gotoRule('st asignado');\n      }\n      else{\n        result.gotoRule('pendiente asignacion');\n      }\n    }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.userData.variables.sublineaProducto);\n        bmconsole.log(response);\n  \t\tuser.set('CA_name','getServicioTecnico')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"getserviciotecnico.js"},{"publishedCode":"const IS_TEST = user.get(\"botmakerEnvironment\") === \"DEVELOPMENT\";\nconst botmakerToken = \"eyJhbGciOiJIUzUxMiJ9.eyJidXNpbmVzc0lkIjoiZ2VzdGlvbiIsIm5hbWUiOiJHZXN0aW9uIiwiYXBpIjp0cnVlLCJpZCI6IlNhc2k3M2hqWGFnVmhRZ09yd2QxTW5oOEFnWjIiLCJleHAiOjE4ODE4NTI4OTQsImp0aSI6IlNhc2k3M2hqWGFnVmhRZ09yd2QxTW5oOEFnWjIifQ.4QgGGWc1wColZGuXcV2kzARzChUKo251aFhzEx_suSmdwiGwfITr3RBkcnaR2OHqKS6-kqUriWKSI9flXdiWrg\";\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst getName = () => {\n  if (context.userData.FIRST_NAME) {\n    if (context.userData.LAST_NAME)\n      return (\n        context.userData.FIRST_NAME.trim() +\n        \" \" +\n        context.userData.LAST_NAME.trim()\n      );\n    else return context.userData.FIRST_NAME.trim();\n  } else {\n    return context.userData.FIRST_NAME.trim();\n  }\n};\n\nconst saveChat = async () => {\n  const chatChannel = context.userData.CHAT_CHANNEL_ID;\n  const chatPlatform = context.userData.CHAT_PLATFORM_ID.toUpperCase();\n\n  const channelId = chatChannel.slice(\"-\")[2];\n  const chatId = context.message.CUSTOMER_ID;\n\n  const options = {\n    method: \"GET\",\n    uri: \"https://api.botmaker.com/v2.0/messages\",\n    qs: {\n      \"channel-id\": channelId,\n      \"chat-id\": chatId,\n      \"chat-platform\": chatPlatform,\n      \"from\" : moment(context.message.SESSION_CREATION_TIME).utc().toISOString(),\n      \"to\" : moment.utc().toISOString(),\n    },\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"access-token\": botmakerToken,\n    },\n    json: true,\n  };\n\n  return rp(options);\n};\n\nconst createBody = async () => {\n  const response = await saveChat();\n  bmconsole.log(response)\n  const messages = response.items;\n  let json;\n  let lista = [];\n  for (let i = 0; i < messages.length; i++) {\n    const msj = messages[i].content.text || messages[i].content.selectedButton;\n    const date = moment(messages[i].creationTime)\n      .utc()\n      .utcOffset(-5)\n      .format(\"DD/MM/YYYY HH:mm\");\n    const template = messages[i].content.whatsAppTemplateName;\n    json = {\n      date: messages[i].creationTime, //date,\n      fromName:\n        messages[i].from == \"user\" ? getName() : messages[i].from,\n      _id_: messages[i].id,\n      from: messages[i].from,\n      message: template ? template + msj : msj,\n      file:\n        messages[i].content.type !== \"text\" &&\n        messages[i].content.type !== \"buttons\" &&\n        messages[i].content.type !== \"button-click\"\n          ? messages[i].content.media && messages[i].content.media.url\n          : undefined,\n      operatorId:\n        messages[i].from == \"operator\"\n          ? context.userData.CURRENT_OPERATOR_EMAIL\n          : undefined,\n      fromCustomer: messages[i].from == \"user\" ? true : false,\n      //whatsappReferral: context.message.FROM,\n      //whatsappReferral: {},\n    };\n    lista.push(json);\n  }\n  //agregamos como ultimo mensaje el id de la sesion\n  lista.push({ ...lista[lista.length-1] }); // copiamos el ultimo elemento\n  lista[lista.length-1].message = (\"id_session_para_BI: \"+context.userData._id_ + \"_\" + context.message.SESSION_CREATION_TIME);// le ponemos de texto el id de la sesion\n  lista[lista.length-1].fromCustomer = true;\n  lista[lista.length-1].from = 'user';\n  lista[lista.length-1].date = new Date();\n  lista[lista.length-1]._id_ = lista[lista.length-1]._id_+1;\n  //result.text(JSON.stringify( lista[lista.length-1]))\n  return lista;\n};\n\n// Main Block\nconst main = async () => {\n  //result.text(context.userData._id_ + \"_\" + context.message.SESSION_CREATION_TIME)\n  const mensajes = await createBody();\n  let number = context.userData.CHAT_CHANNEL_ID;\n  try {\n    // TODO: solo para WA\n    let parts = number.split('-');\n    number = parts[2];\n  } catch (error) {\n    number = \"5491128738960\";\n  }   \n\n  bmconsole.log(number);\n  let payload = {\n    lastName: context.userData.LAST_NAME,\n    chatPlatform: context.userData.CHAT_PLATFORM_ID,\n    customerCreationTime: context.message.CREATION_TIME,\n    contactId: context.userData.PLATFORM_CONTACT_ID,\n    type: \"message\",\n    whatsappNumber: number,\n    firstName: context.userData.FIRST_NAME,\n    sessionCreationTime: context.message.SESSION_CREATION_TIME,\n    v: \"1.1\",\n    sessionId: context.userData._id_ + \"_\" + context.message.SESSION_CREATION_TIME,\n    customerId: context.message.CUSTOMER_ID,\n    messages: mensajes,\n    chatChannerlId: context.userData.CHAT_CHANNEL_ID,\n  };\n  const options = {\n    method: \"POST\",\n    uri: \"https://s2.pyzen.com/NeoWebhook/api/Botmaker/IncomeV2\",\n    body: payload,\n    json: true,\n  };\n  const res = await rp(options);\n  bmconsole.log(\"[STATUS] \" + JSON.stringify(res));\n};\n\nmain()\n  .catch((err) => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally(() => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"name":"webhook_send_msgs_v2","type":"USER","id":"13CY5LXSEOP3T8JESG5G","filename":"webhook_send_msgs_v2.js"},{"id":"8YMOWOFSI0CMZR5AE8KO","name":"getCertificados(Seguros)","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\n//@constant('Variable where the response will be stored')\nconst BM_RESULT_VAR_NAME = 'siniestros'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst es_vigente = (estado) => {\n  estado = estado.trim().toLowerCase();\n  if (estado=== 'vigente' || estado === 'vigente pendiente de impresión'){\n    return true;\n  }\n  return false;\n}\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/crm/cardif/getCertificados?segment_id=${context.userData.variables.id_contacto}`,\n        json: true,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async() => {\n    const response = await callServiceApiRest();\n   \n    if (response[\"value\"].length > 0){\n      \n      let certificados = [];\n      for(let i = 0;i < response[\"value\"].length; i++){\n        let estado = es_vigente(response[\"value\"][i].bfs_estado);\n        if (estado && (!response[\"value\"][i].bfs_certificado.includes('-')) ){\n          certificados.push(response[\"value\"][i]);\n        }\n      }\n      user.set('q_certificados', certificados.length);\n      if (certificados.length === 0){\n      \tresult.gotoRule('Hablar con Agente')\n        return;\n      }\n      let buttons = result.buttonsBuilder().text('Selecciona el seguro que queres conocer:');\n      \n      for(let i = 0;i < certificados.length; i++){\n        let nombre_certificado = certificados[i].bnp_desc_prod_mkt? `${certificados[i].bfs_certificado} - ${certificados[i].bnp_desc_prod_mkt}` :`${certificados[i].bfs_certificado}`; \n        buttons.addClientActionButton(nombre_certificado, 'mostrarDatosCertificado', {\n                'valueSelected': certificados[i].bfs_certificado,\n            });\n      }\n      buttons.addClientActionButton('Ninguno de los anteriores', 'mostrarDatosCertificado', {\n                'valueSelected': 'ninguno',\n            });\n      buttons.quickReplies();\n      buttons.send();\n      user.set('certificados', JSON.stringify(certificados));\n    }else{\n      result.gotoRule('Hablar con Agente')\n    }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.userData.variables.id_contacto);\n  \t\tuser.set('CA_name','getCertificados(Seguros)')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"getcertificados_seguros_.js"},{"id":"KPQ5Y8Z0CAHF5N1BH3TJ","name":"tabularsesion","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'POST';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = `bearer`\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\nconst CUSTOMER_ID = context.userData._id_;\n\nconst tabular = (TOKEN,data) => {\n    return rp({\n        method: 'POST',\n        uri: `${URI}/botmaker/tabularCierre`,\n        json: true,\n        body:data,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'auth-token' : `${TOKEN}`\n        },\n    });\n}\n\nfunction convertirFechaArgentina(fechaString) {\n  // Convierte la cadena de fecha a un objeto Date en UTC\n  const fechaUTC = new Date(fechaString);\n\n  // Obtiene el desplazamiento horario en minutos para Argentina (UTC-3)\n  const offsetArgentina = -3 * 60;\n\n  // Calcula el desplazamiento horario en milisegundos\n  const offsetMillis = offsetArgentina * 60 * 1000;\n\n  // Crea un nuevo objeto Date con el desplazamiento horario aplicado\n  const fechaArgentina = new Date(fechaUTC.getTime() + offsetMillis);\n\n  return fechaArgentina;\n}\n\nconst main = async () => {\n   \n  if (user.get('tipoCierre') === 'abandoned'){\n    return;\n  }\n  let tabulacion = {\n    fecha_inicio :convertirFechaArgentina(context.message.SESSION_CREATION_TIME),\n    fecha_fin :convertirFechaArgentina(new Date().toString()),\n    session_id: context.userData._id_+'_'+context.message.SESSION_CREATION_TIME,\n    tipo_cierre: user.get('tipoCierre'),\n    fue_derivado:user.get('fueDerivado'),\n    bot_description: 'cardif'\n  }\n  user.set('fecha_hora_inicio',context.message.SESSION_CREATION_TIME)\n  user.set('fecha_hora_fin',new Date().toString())\n  user.set('id_sesion',context.userData._id_+'_'+context.message.SESSION_CREATION_TIME)\n  //await tabular(user.get('token'),tabulacion);\n\n\n};\n\nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[CA_NAME] Error ${err.message}`;\n        user.set('ca_error', errorMessage); // Set error variable with error message to see on Events\n        bmconsole.log(errorMessage); // Log Error\n    })\n    .finally(result.done);\n","unPublishedCode":null,"filename":"tabularsesion.js"},{"id":"HVRU4THI5TX32BUWCAJC","name":"registrarLog","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'POST';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = `bearer`\n\nconst logear = (TOKEN,data) => {\n  return rp({\n      method: 'POST',\n      uri: `${URI}/botmaker/logear`,\n      json: true,\n      body:data,\n      headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'auth-token' : `${TOKEN}`\n      },\n  });\n}\n\nconst main = async () => {\n  let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4';\n  let data = {\n    fecha_hora: new Date(),\n    accion_de_codigo: user.get('CA_name'),\n    bot_description: 'cardif',\n    status: 'error',\n    descripcion: user.get('descripcion'),\n    session_id: context.userData._id_+context.message.SESSION_CREATION_TIME,\n  }\n  await logear(token,data);\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"registrarlog.js"},{"id":"BCIMVFV0TNRR0Z812LLO","name":"getDescripcionSiniestro","type":"USER","publishedCode":"const main = async() => {\n    let siniestro = context.userData.variables.estado_siniestro.toLowerCase().trim(), descripcion_estado = '';\n    switch(siniestro){\n    \tcase'pendiente inicial':\n        case'pendiente cardif':\n        \tdescripcion_estado += `Te informamos que nuestros especialistas están analizando tu siniestro para brindarte una respuesta dentro de los plazos comprometidos.\n            Si de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`;\n        break;\n        case'liquidado':\n        \tdescripcion_estado += `Te informamos que tu siniestro fue aprobado y que en un plazo máximo de 15 días realizaremos el pago correspondiente. \n            Si de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`;\n        break;\n        case'cerrado con pago':\n        \tdescripcion_estado += `Te informamos que tu siniestro se encuentra Abonado. Ingresá a tu cuenta bancaria para verificar el pago. \n\t\t\tSi de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`;\n        break;\n        case'pagado totalmente':\n        \tdescripcion_estado += `Te informamos que tu siniestro se encuentra Abonado. Ingresá a tu cuenta bancaria para verificar el pago. \n\t\t\tSi de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`;\n        break;\n        case'en tramitacion':\n        \tdescripcion_estado += `Te informamos que nuestros especialistas están analizando tu siniestro para brindarte una respuesta dentro de los plazos comprometidos.\n\t\t\tSi de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`\n        break;\n        case'en captura incompleta':\n        \tdescripcion_estado += `Te informamos que nuestros especialistas están analizando tu siniestro para brindarte una respuesta dentro de los plazos comprometidos.\n\t\t\tSi de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`\n        break;\n        case'liquidado total':\n        \tdescripcion_estado += `Te informamos que tu siniestro fue aprobado y que en un plazo máximo de 15 días realizaremos el pago correspondiente. \n            Si de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`;\n        break;\n        case'pagado total':\n        \tdescripcion_estado += `Te informamos que tu siniestro se encuentra Abonado. Ingresá a tu cuenta bancaria para verificar el pago. \n\t\t\tSi de todas formas querés contactarte con un representante, Ingresá a \"Hablar con asesor\", de lo contrario muchas gracias por comunicarte.`;\n        break;\n      default:\n        result.gotoRule('Hablar con Agente');\n        break;\n    }\n  \tif (descripcion_estado !== '')\n      context.userData.variables.descripcion_estado = descripcion_estado;\n};\n\nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[User Basic Template] Error -  ${err.message}`;\n        bmconsole.log(errorMessage); // Log Error\n  \t\tresult.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"getdescripcionsiniestro.js"},{"id":"80MODN0B2UT17OSAZGZC","name":"clienteAbandono","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:33443/neoapi';\nconst METHOD = 'POST';\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst OUTPUTS = {\n  log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nfunction agregarNueve(numeroTelefono) {\n    // Verificar si la subcadena \"+549\" está presente\n    if (!numeroTelefono.includes(\"+549\")) {\n        // Agregar la subcadena \"+549\" al principio\n        let numero_nuevo = numeroTelefono.replace('+54','+549')\n        bmconsole.log(numero_nuevo)\n        return numero_nuevo;\n    }\n\tbmconsole.log(numeroTelefono)\n    return numeroTelefono;\n}\n\nconst callServiceApiRest = (formData) => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/webservice.asmx/ExecuteTask01`,\n        form: formData,\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n        },\n    });\n}\n\nconst main = async() => {\n\n  let form = {\n      idtask: '281',\n      param1: agregarNueve(context.userData.PLATFORM_CONTACT_ID),\n  }\n  bmconsole.log(form)\n  const response = await callServiceApiRest(form);\n  bmconsole.log(response);\n  const xml = response;\n  var parser = new xml2js.Parser(/* options */);\n  let parsed_xml = await parser.parseStringPromise(xml);\n  let typification = parsed_xml[\"string\"]._ ? parsed_xml[\"string\"]._ : null;\n  if (typification === 'CLOSEDTIMEOUT'){\n    user.set('abandono_user',true)\n  }\n  else{\n    user.set('abandono_user',false)\n  }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        bmconsole.log(err);\n\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"clienteabandono.js"},{"id":"RE1OSYXPRDBSS13DUFLL","name":"getSiniestros","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\n//@constant('Variable where the response will be stored')\nconst BM_RESULT_VAR_NAME = 'siniestros'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/crm/cardif/getDatosSiniestro?segment_id=${context.userData.variables.id_contacto}`,\n        json: true,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nfunction filtrarPorRango(siniestros) {\n  // Obtener la fecha actual\n  const hoy = new Date();\n\n  // Calcular la fecha límite (60 días a partir de hoy)\n  const limite = new Date();\n  limite.setDate(hoy.getDate() - 60);\n\n  // Filtrar los objetos dentro del rango de fechas\n  const siniestrosfiltrados = siniestros.filter(siniestro => {\n    // Convertir la cadena de fechaEvaluacion a objeto Date\n    const fechaEvaluacion = new Date(siniestro.bfs_claimobjectiondate);\n\n    // Verificar si la fecha está dentro del rango\n    return fechaEvaluacion <= hoy && fechaEvaluacion >= limite;\n  });\n\n  return siniestrosfiltrados;\n}\n\nconst main = async() => {\n    const response = await callServiceApiRest();\n    let _siniestros = filtrarPorRango(response[\"value\"]);\n  \tuser.set('q_siniestros', _siniestros.length);\n  \n    if (_siniestros.length > 0){\n      result.text('Listado de siniestros en curso.')\n      let buttons = result.buttonsBuilder().text('Seleccioná el número de siniestro por el que quieras consultar:');\n      let siniestros = [];\n      for(let i = 0;i < _siniestros.length; i++){\n\n        buttons.addClientActionButton(_siniestros[i].bfs_idsiniestro, 'mostrarEstadoSiniestro', {\n                'valueSelected': _siniestros[i].bfs_idsiniestro,\n            });\n      }\n      buttons.addClientActionButton('Ninguno de los anteriores', 'mostrarEstadoSiniestro', {\n                'valueSelected': 'ninguno',\n            });\n      buttons.quickReplies();\n      buttons.send();\n      user.set('siniestros', JSON.stringify(_siniestros));\n    }else{\n      result.text('No se encontró ningun siniestro en curso asociado al documento.')\n      //result.text('Si no ves el siniestro por el que querés consultar, podés comunicarte directamente con uno de nuestros agentes.')\n      result.gotoRule('Hablar con Agente')\n    }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.userData.variables.id_contacto);\n  \t\tuser.set('CA_name','getSiniestros')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);\n\n\n","unPublishedCode":null,"filename":"getsiniestros.js"},{"id":"B8FONGHI3GTLC71STZJH","name":"mostrarEstadoOT","type":"USER","publishedCode":"const main = async () => {\n    //result.text('Usted eligio: '+ context.params.valueSelected);\n    let ots = JSON.parse(context.userData.variables.ots);\n  \tbmconsole.log(ots)\n  \tbmconsole.log(context.params.valueSelected)\n    if (context.params.valueSelected === 'ninguno'){\n          result.gotoRule('Hablar con Agente');\n    }\n    else{\n        let ot = ots[parseInt(context.params.valueSelected)];\n        user.set('msgCliente',ot.msgCliente);\n        user.set('numeroOrdenDeTrabajo',ot.numeroOrdenDeTrabajo);\n        result.gotoRule('datos OT');\n    }\n};\n    \nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(ots);\n  \t\tbmconsole.log(context.params.valueSelected);\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);\n","unPublishedCode":null,"filename":"mostrarestadoot.js"},{"id":"B0SVC2Y5C17V0VB1GAEU","name":"getGarantias","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/warranty/cardif/getGarantias?nro_documento=${context.userData.variables.documento}&tipo_documento=0`,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async() => {\n    let response = await callServiceApiRest();\n    bmconsole.log(response);\n  \t//seteamos la cantidad de garantias obtenidas\n    response = JSON.parse(response);\n    if (response && response.garantiasCliente.length > 0){\n        user.set('q_garantias', response.garantiasCliente.length)\n      \tresult.text(`Este es el listado de garantías extendidas que coinciden con tus datos.`);\n      let buttons = result.buttonsBuilder().text('');\n      let garantias = [];\n      for(let i = 0;i < response.garantiasCliente.length; i++){\n        buttons.addClientActionButton(response.garantiasCliente[i], 'mostrarEstadoGarantia', {\n        \t'valueSelected': i,\n        });\n      }\n      buttons.addClientActionButton('Ninguna de las anteriores', 'mostrarEstadoGarantia', {\n            'valueSelected': 'ninguno',\n      });\n      buttons.quickReplies();\n      buttons.send();\n      user.set('garantias', JSON.stringify(response.data))\n    }\n    else{\n      user.set('CA_name','getGarantias')\n  \t  user.set('descripcion',`error: ${response.errores? response.errores.MensajeError.mensajeError : JSON.stringify(response)}\\n`)\n      result.gotoRule('Hablar con Agente');\n    }\n    //response = JSON.parse(response);\n    //result.text(JSON.stringify(response, null, 2))\n    \n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.userData.variables.documento);\n        bmconsole.log(response);\n        user.set('CA_name','getGarantias')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"getgarantias.js"},{"id":"2RYAJPAZW3L0ITIOBUK1","name":"getTokenArcat","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'POST';\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst getToken = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/rt/createToken`,\n        json: true,\n        resolveWithFullResponse: true,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n    });\n}\n\nconst main = async() => {\n    //const response = await getToken();\n    context.userData.variables.token =  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  Error - ${err.message}`;\n        OUTPUTS.log(errorMessage);\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"gettokenarcat.js"},{"id":"2JNPMBJC53IJ7GU0AGDP","name":"elegirLocalidad","type":"USER","publishedCode":"const main = async () => {\n    //result.text('Usted eligio: '+ context.params.valueSelected);\n    let Localidades = JSON.parse(user.get('Localidades'));\n    if (context.params.valueSelected === 'ninguno'){\n           result.gotoRule('Hablar con Agente');\n    }\n    let localidad = Localidades[parseInt(context.params.valueSelected)];\n  \tresult.text(`La localidad que coincide con el CP ingresado es *${localidad.Localidad.nombreLocalidad.toLowerCase()}*`);\n      user.set('codigoLocalidad',localidad.Localidad.codigoLocalidad);\n      user.set('codigoProvincia', localidad.Provincia.codigoProvincia);\n   result.gotoRule('datos garantia');\n};\n    \nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[CA_NAME] Error ${err.message}`;\n        user.set('ca_error', errorMessage); // Set error variable with error message to see on Events\n        bmconsole.log(errorMessage); // Log Error\n    })\n    .finally(result.done);\n","unPublishedCode":null,"filename":"elegirlocalidad.js"},{"id":"XTZCSH0PRJI4AUDBL3OD","name":"identificarUsuario","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'GET';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\n//@constant('Variable where the response will be stored')\nconst BM_RESULT_VAR_NAME = 'certificados'\n\nconst IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\nconst CUSTOMER_ID = context.userData._id_;\n\nconst OUTPUTS = {\n    log: (text) => { IS_TEST ? result.text(text) : bmconsole.log(text); },\n};\n\nconst callServiceApiRest = () => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/warranty/cardif/getCertificadosByDNI?tipo_documento=0&nro_documento=${user.get('documento')}`,\n        json: true,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async() => {\n    bmconsole.log(user.get('documento'))\n    const response = await callServiceApiRest();\n\n  if (typeof response.data === 'string'){\n      \tcontext.userData.variables.es_contacto = false;\n      \t\n    }else{\n        context.userData.variables.es_contacto = true;\n        let nombre_ok = '',apellido_ok = '';\n        //buscamos el nombre, tiene que ser distinto de \"\" y el string \"no informado\"\n        for(let c=0;c<response.data.length;c++){\n          let certificado = response.data[c];\n          if (nombre_ok === '' && (certificado.nombre_cliente && certificado.nombre_cliente != \"\" && certificado.nombre_cliente.toLowerCase().trim() !== 'no informado' && certificado.nombre_cliente.toLowerCase().trim() !== 'sin nombre')){\n          \tnombre_ok = certificado.nombre_cliente;\n          }\n          if (apellido_ok === '' && (certificado.apellido_cliente && certificado.apellido_cliente != \"\" && certificado.apellido_cliente.toLowerCase().trim() !== 'no informado' && certificado.apellido_cliente.toLowerCase().trim() !== 'sin apellido')){\n          \tapellido_ok = certificado.apellido_cliente;\n          }\n        }\n        user.set('nombre',nombre_ok)\n        user.set('apellido',apellido_ok)\n        bmconsole.log(user.get('nombre'))\n        bmconsole.log(user.get('apellido'))\n    }\n};\n\nmain()\n    .catch((err) => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :   ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.userData.variables.documento);\n  \t\tuser.set('CA_name','identificarUsuario')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('asignar a agente');\n        \n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"identificarusuario.js"},{"id":"V8Z44ARMGZJHLT64LFXA","name":"mostrarDatosCertificado","type":"USER","publishedCode":"const main = async () => {\n    //result.text('Usted eligio: '+ context.params.valueSelected);\n    if (context.params.valueSelected === 'ninguno'){\n          result.gotoRule('Hablar con Agente')\n    }\n    else{\n      //es numero?\n      let isnum = /^\\d+$/.test(context.params.valueSelected);\n      \n      if (isnum){\n        result.gotoRule(\"Hablar con Agente\");\n      }\n      else{\n        result.gotoRule(\"continuar cert \");\n      }\n    }\n};\n    \nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.params.valueSelected);\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);\n","unPublishedCode":null,"filename":"mostrardatoscertificado.js"},{"id":"1B3LX38PE7XXZLA7ESDL","name":"mostrarEstadoSiniestro","type":"USER","publishedCode":"const main = async () => {\n    //result.text('Usted eligio: '+ context.params.valueSelected);\n    let siniestros = JSON.parse(context.userData.variables.siniestros);\n  \tbmconsole.log(siniestros);\n  \tbmconsole.log(context.params.valueSelected);\n    if (context.params.valueSelected === 'ninguno'){\n          result.gotoRule('Hablar con Agente');\n    }\n    for(let i = 0;i < siniestros.length; i++){\n        if (siniestros[i].bfs_idsiniestro === context.params.valueSelected) {\n          context.userData.variables.estado_siniestro = siniestros[i].bfs_estado;\n          //result.text(`Estado:${siniestros[i].estado}`)\n          result.gotoRule('continuar siniestros');\n       }\n    }\n};\n    \nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(context.params.valueSelected);\n        bmconsole.log(siniestros);\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);\n","unPublishedCode":null,"filename":"mostrarestadosiniestro.js"},{"id":"ZXQOGW1S7H4Z1TQ8RBRH","name":"crearOT","type":"USER","publishedCode":"//@constant('Use external service URI')\nconst URI = 'https://service01.cat-technologies.com:4484/api';\n\n//@constant('Use http method (POST, GET, PUT...)')\nconst METHOD = 'POST';\n\n//@constant('Authentication key. Only if the service requires')\nconst AUTHENTICATION = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzA1MDA0NDgxfQ.Oafh2Xya6lIV8hlw1haYqDj_jVHneMkDVezN5Y-EGd4'\n\nconst callServiceApiRest = (data) => {\n    return rp({\n        method: METHOD,\n        uri: `${URI}/warranty/cardif/crearOrdenDeTrabajo`,\n        json: true,\n        body:data,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            \"auth-token\": AUTHENTICATION,\n        },\n    });\n}\n\nconst main = async () => {\n  \n    let nro_contacto = context.userData.CHAT_PLATFORM_ID === 'whatsapp'? context.userData.PLATFORM_CONTACT_ID : null;\n  \tlet calle = user.get('calle')? user.get('calle') : '-';\n    let direccion = user.get('domicilio')? user.get('domicilio').substring(0,100) : calle.substring(0,100);\n  \n    const data = {\t\n      \tcodigo_ss_tecnico: user.get('codigo_sstecnico')? user.get('codigo_sstecnico') : 99999999,\n      \tpoliza: user.get('poliza'),\n      \tcodigo_extra_garantia: user.get('codigoExtragarantia'),\n      \tdescripcion_falla:user.get('falla_descripcion')?user.get('falla_descripcion').substring(0,300) : \"\",\n      \tapellido:user.get('apellido')?user.get('apellido').substring(0,50) : \"-\",\n      \tnombre:user.get('nombre')?user.get('nombre').substring(0,50) : \"-\",\n      \ttelefono_1:nro_contacto? nro_contacto : user.get('telefono_contacto'),\n      \ttelefono_2:user.get('telefono_contacto'),\n      \temail:user.get('email'),\n      \tcp:user.get('cp'),\n      \tdireccion:direccion,\n      \tnro_puerta:user.get('puerta')?user.get('puerta') : \"\",\n      \tcodigo_localidad:user.get('codigoLocalidad'),\n      \tcodigo_provincia:user.get('codigoProvincia'),\n      \ttipo_documento:0,\n      \tnro_documento:user.get('documento'),\n    }\n    bmconsole.log(data);\n    const response = await callServiceApiRest(data);\n    bmconsole.log(response);\n    if (response.data && response.data != ''){\n      user.set('numeroOT',response.data)\n    }\n    else{\n      user.set('CA_name','crearOT')\n  \t  user.set('descripcion',`error: ${response.errores? response.errores.MensajeError.mensajeError : JSON.stringify(response)}\\n`)\n      if (!response.errores){\n      \tresult.gotoRule('Hablar con Agente');\n      }\n    }\n};\n    \nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[Integration with api rest] :  ${err.message}`;\n        bmconsole.log(errorMessage);\n        bmconsole.log(data);\n        bmconsole.log(response);\n  \t\tuser.set('CA_name','crearOT')\n  \t\tuser.set('descripcion',`error: ${err.message}\\n ${JSON.stringify(response)}`)\n        result.gotoRule('Hablar con Agente');\n    })\n    .finally(result.done);\n\n","unPublishedCode":null,"filename":"crearot.js"},{"id":"5XZMOXS7LCVCTEHGMXXW","name":"mostrarDatosSsTecnico","type":"USER","publishedCode":"const main = async () => {\n    //result.text('Usted eligio: '+ context.params.valueSelected);\n    let servicios = JSON.parse(context.userData.variables.servicios); servicio = servicios [parseInt(context.params.valueSelected)]\n    \n    let ss_tecnico = `Los datos asociados al servicio técnico son los siguientes:\n            Nombre: ${servicio.nombreDeServicioTecnico}\n            Dirección:${servicio.direccion}\n            Horario de atención:${servicio.horarioDeAtencion}\n            Email: ${servicio.email}\n            Teléfono: ${servicio.telefono}\n            Te recordamos que tenés 5 días hábiles para comunicarte y llevar tu producto al Servicio Técnico, de lo contrario esta Orden de Trabajo (OT) se dará de baja y tendrás que generar una nueva.`\n        \tuser.set('codigo_sstecnico', servicio.codigoServicio);\n  \t\t\tuser.set('datos_sstecnico', ss_tecnico);\n        \tresult.gotoRule('st asignado');\n};\n    \nmain()\n    .catch(err => {\n        // Code on error\n        const errorMessage = `[CA_NAME] Error ${err.message}`;\n        user.set('ca_error', errorMessage); // Set error variable with error message to see on Events\n        bmconsole.log(errorMessage); // Log Error\n    })\n    .finally(result.done);","unPublishedCode":null,"filename":"mostrardatossstecnico.js"},{"publishedCode":"let utils = require('utils');\n\nasync function checkDate() {\n  let ahora = moment();\n  // Chequeo si es feriado\n  let feriado = await utils.isFeriado(ahora);\n  if (feriado) {\n    if (feriado.tipo == 'custom') {\n      user.set('mensajeAtencion', `¡Hoy es el Día del Seguro en la Argentina, estamos festejando!.\n        Te pedimos que vuelvas a escribirnos el próximo día hábil de lunes a viernes de 8 a 19 hs. así podemos ayudarte. Gracias`);\n\n    } else {\n      // Mensaje si es feriado\n      user.set('mensajeAtencion', `¡Hoy es feriado en Argentina, esperamos que estés descansando!.\n        Te pedimos que vuelvas a escribirnos el próximo día hábil de lunes a viernes de 8 a 19 hs. así podemos ayudarte. Gracias`);\n    }\n    return false;\n  }\n\n  // Chequeo el horario y el día de la semana\n  if (ahora.day() == 0 || ahora.day() == 6 || ahora.hour() < 8 || ahora.hour() > 19) {\n    user.set('mensajeAtencion', \"Te informamos que nuestro horario de atención de lunes a viernes de 8 a 19 hs. Te pedimos que vuelvas a escribirnos dentro de ese horario así podemos ayudarte.\");\n    return false;\n  }\n  // Mensaje si está dentro del horario de atención y no es feriado\n  return true;\n}\n\nconst main = async () => {\n  try {\n    const enAtencion = await checkDate();\n    user.set('enAtencion', enAtencion);\n  } catch (error) {\n    user.set('enAtencion', true);\n  }\n  user.set('tiempo_atencion', context.message.SESSION_CREATION_TIME)\n};\n\nmain()\n  .catch(err => {\n    const errorMessage = `[CA_NAME] Error ${err.message}`;\n    user.set('ca_error', errorMessage); // Set error variable with error message to see on Events\n    bmconsole.log(errorMessage); // Log Error\n  })\n  .finally(result.done);\n","unPublishedCode":null,"name":"enHorarioAtencion","type":"USER","id":"7H33ADQV6IN5BEJQUX1Z","filename":"enhorarioatencion.js"},{"id":"FD3FNQ3J6E2JARUAR8QE","name":"test","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"test.js"},{"id":"F1BXM4K8EFQ8SUQ1MQWC","name":"pdf_lib","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"pdf_lib.js"},{"publishedCode":"/**\n * Tabla de feriados adicionales\n */\nferiadosAdicionales: () =>{\n  return [\n    {fecha: '2024-10-21', tipo: 'custom', nombre: 'Día del seguro 2024'},\n  ];\n},\n/**\n * Carga de feriados contra un servicio externo\n * @param {*} year Año de los feriados\n * @returns \n */\ngetFeriados: async (year) => {\n  return await rp({\n    method: 'GET',\n    uri: `https://api.argentinadatos.com/v1/feriados/${year}`,\n    json: true,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n  });\n},\nisFeriado: async (cuando) => {\n  // Traigo los feriados desde el servicio\n  let feriados = await utils.getFeriados(cuando.year());\n\n  // Hago el merge con los feriados adicionales\n  feriados = feriados.concat(utils.feriadosAdicionales());\n\n  const found = feriados.find( (f) =>     f.fecha == cuando.format('YYYY-MM-DD')  );\n\n  return found;\n}\n","unPublishedCode":null,"name":"utils","type":"USER","id":"BNIWFKHYLS5FVTILFE6Q","filename":"utils.js"},{"id":"0K53ZLKKQH1X8T5EJEGM","name":"feriados_adicionales","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"feriados_adicionales.js"},{"id":"NYKHOY2O4YKS6L52PSIF","name":"getFeriados","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"getferiados.js"},{"id":"LAMUN74VOICFUZ2HK8LN","name":"list_all_intents","type":"USER","publishedCode":"const IS_TEST = user.get('botmakerEnvironment') === 'DEVELOPMENT';\n\nconst main = async () => {\n  // TODO your code here\n};\n\nmain()\n  .catch(err => {\n    // Code on error\n    if (IS_TEST) {\n      result.text(`[ERROR] : ${err.message}`);\n    }\n    bmconsole.error(`[ERROR]: ${err.message}`);\n  })\n  .finally( () => {\n    // Code on finish\n    result.done();\n  });\n","unPublishedCode":null,"filename":"list_all_intents.js"}]}